@page "/settings"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Onebrb.SPA.Models
@using System.Security.Claims
@using System.Net

@attribute [Authorize]

@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

@*CHECK IF USER HAS ACTIVATED HIS PROFILE*@


@if (res == null)
{
    <p><em>Fetching data, please wait...</em></p>
    <object data="loading.svg" width="100" height="100"></object>
}
else
{
    if (profile == null && res.StatusCode == HttpStatusCode.NotFound && !clickedActivateProfile)
    {
        <div class="alert alert-warning" role="alert">
            <p>Your profile is not active yet. Please activate it.</p>
            <RadzenButton Click=@(args => OnActivateProfileClick()) Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
        </div>
    }

    if (profile == null && res.StatusCode == HttpStatusCode.NotFound && clickedActivateProfile)
    {
        <p><em>Activating your profile, please wait...</em></p>
        <object data="loading.svg" width="100" height="100"></object>
    }

    if (profile != null)
    {
        <div class="settings-component">
            <RadzenTemplateForm Data="@profile" Submit="@((ProfileModel args) => { Submit(args); })">
                <div class="row">
                    <div class="settings-component__form col-md-6">
                        <div class="row">
                            <div class="settings-component__form__input-div col-md-8">
                                <RadzenTextBox style="width: 100%;" Name="First Name" @bind-Value="profile.FirstName" />
                            </div>
                            <div class="settings-component__form__input-div col-md-8">
                                <RadzenTextBox style="width: 100%;" Name="Last Name" @bind-Value="profile.LastName" />
                            </div>
                            <div class="settings-component__form__input-div col-md-8">
                                <RadzenTextBox style="width: 100%;" Name="Email" @bind-Value="profile.Email" />
                            </div>
                            <div class="settings-component__form__input-div col-md-8">
                                <RadzenTextBox style="width: 100%;" Name="Phone" @bind-Value="profile.Phone" />
                            </div>
                            @*                        <div class="settings-component__form__input-div col-md-8">
                    <RadzenDropDown @bind-Value="order.Country" Data="@professions" style="width: 100%;" TextProperty="Name" ValueProperty="Id" Name="Profession">
                    </RadzenDropDown>
                    </div>
                    <div class="settings-component__form__input-div col-md-8">
                    <RadzenDropDown @bind-Value="order.Country" Placeholder="USA" Data="@countries" style="width: 100%;" TextProperty="Name" ValueProperty="Id" Name="Country">
                    </RadzenDropDown>
                    </div>*@
                            <div class="settings-component__form__input-div col-md-8">
                                <RadzenCard>
                                    <h4 class="mb-4">About</h4>
                                    <RadzenTextArea Class="w-100" @bind-Value="profile.About" />
                                </RadzenCard>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-md-12 d-flex" style="margin-top: 16px;">
                        <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
                    </div>
                </div>
            </RadzenTemplateForm>
        </div>
    }
}

@code {
    private HttpResponseMessage? res;
    private ProfileModel? profile;
    private bool clickedActivateProfile = false;

    public class Profession
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    void Submit(ProfileModel arg)
    {
    //
    }

    void Cancel()
    {
    //
    }

    void OnActivateProfileClick()
    {
        clickedActivateProfile = true;
    }

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private async Task HasActivatedProfile()
    {
        var client = ClientFactory.CreateClient("OnebrbAPI");

        res = await client.GetAsync($"{Configuration["AppConfiguration:OnebrbAPIEndpoint"]}/profiles/current-profile");

        if (res.IsSuccessStatusCode)
        {
            profile = await client.GetFromJsonAsync<ProfileModel>($"{Configuration["AppConfiguration:OnebrbAPIEndpoint"]}/profiles/current-profile");
        }
        else
        {
            // No profile found. Activate profile.
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await HasActivatedProfile();

        //var client = ClientFactory.CreateClient("OnebrbAPI");

        //res = await client.GetAsync($"{Configuration["AppConfiguration:OnebrbAPIEndpoint"]}/profiles/current-profile");

        //if (res.IsSuccessStatusCode)
        //{
        //    profile = await client.GetFromJsonAsync<ProfileModel>($"{Configuration["AppConfiguration:OnebrbAPIEndpoint"]}/profiles/current-profile");
        //}

        //var authState = await authenticationStateTask;
        //var user = authState.User;
        //var userObject = user.FindFirst("sub");

        //res = await client.GetAsync($"{Configuration["AppConfiguration:OnebrbAPIEndpoint"]}/profiles/1");

        //if (res.IsSuccessStatusCode)
        //{
        //    profile = await client.GetFromJsonAsync<ProfileModel>($"{Configuration["AppConfiguration:OnebrbAPIEndpoint"]}/profiles/1");
        //}
    }
}